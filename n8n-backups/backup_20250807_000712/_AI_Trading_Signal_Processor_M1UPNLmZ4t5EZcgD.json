{
  "createdAt": "2025-08-06T15:16:56.835Z",
  "updatedAt": "2025-08-06T18:42:06.000Z",
  "id": "M1UPNLmZ4t5EZcgD",
  "name": "ðŸ¤– AI Trading Signal Processor",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Validate incoming trading signal data\nconst signal = $json;\n\n// Required fields validation\nconst requiredFields = ['symbol', 'action', 'price', 'confidence'];\nconst missingFields = requiredFields.filter(field => !signal[field]);\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\n// Validate action type\nif (!['buy', 'sell', 'hold'].includes(signal.action.toLowerCase())) {\n  throw new Error('Invalid action. Must be buy, sell, or hold');\n}\n\n// Validate confidence score\nif (signal.confidence < 0 || signal.confidence > 1) {\n  throw new Error('Confidence must be between 0 and 1');\n}\n\n// Validate symbol format (basic check)\nif (!/^[A-Z]{1,5}$/.test(signal.symbol)) {\n  throw new Error('Invalid symbol format');\n}\n\n// Add processing timestamp and unique ID\nconst processedSignal = {\n  ...signal,\n  signalId: `signal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  receivedAt: new Date().toISOString(),\n  status: 'validated',\n  action: signal.action.toLowerCase()\n};\n\nreturn [processedSignal];"
      },
      "id": "validate_signal",
      "name": "Validate Signal Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://query1.finance.yahoo.com/v8/finance/chart/{{ $json.symbol }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
          ]
        },
        "options": {}
      },
      "id": "get_market_data",
      "name": "Fetch Market Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process Yahoo Finance market data\nconst signal = $('Validate Signal Data').first().json;\nconst marketResponse = $json;\n\nif (!marketResponse.chart || !marketResponse.chart.result || marketResponse.chart.result.length === 0) {\n  throw new Error('No market data available for symbol: ' + signal.symbol);\n}\n\nconst result = marketResponse.chart.result[0];\nconst meta = result.meta;\nconst quotes = result.indicators.quote[0];\nconst timestamps = result.timestamp;\n\n// Get current price and calculate basic indicators\nconst currentPrice = meta.regularMarketPrice;\nconst previousClose = meta.previousClose;\nconst priceChange = currentPrice - previousClose;\nconst priceChangePercent = (priceChange / previousClose) * 100;\n\n// Calculate basic technical indicators\nconst prices = quotes.close.filter(price => price !== null);\nconst volumes = quotes.volume.filter(vol => vol !== null);\n\n// Simple Moving Average (20 periods)\nconst sma20 = prices.slice(-20).reduce((sum, price) => sum + price, 0) / Math.min(20, prices.length);\n\n// Average volume (20 periods)\nconst avgVolume = volumes.slice(-20).reduce((sum, vol) => sum + vol, 0) / Math.min(20, volumes.length);\nconst currentVolume = volumes[volumes.length - 1];\n\n// Volume ratio\nconst volumeRatio = currentVolume / avgVolume;\n\n// Volatility (standard deviation of last 20 prices)\nconst mean = sma20;\nconst variance = prices.slice(-20).reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / Math.min(20, prices.length);\nconst volatility = Math.sqrt(variance);\n\nconst enrichedSignal = {\n  ...signal,\n  marketData: {\n    currentPrice,\n    previousClose,\n    priceChange,\n    priceChangePercent,\n    sma20,\n    volatility,\n    currentVolume,\n    avgVolume,\n    volumeRatio,\n    marketCap: meta.marketCap,\n    currency: meta.currency,\n    exchange: meta.exchangeName,\n    dataTimestamp: new Date().toISOString()\n  },\n  technicalIndicators: {\n    trend: currentPrice > sma20 ? 'bullish' : 'bearish',\n    volumeSignal: volumeRatio > 1.5 ? 'high' : volumeRatio < 0.5 ? 'low' : 'normal',\n    volatilityLevel: volatility > (currentPrice * 0.02) ? 'high' : 'normal'\n  }\n};\n\nreturn [enrichedSignal];"
      },
      "id": "process_market_data",
      "name": "Process Market Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        300
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are an expert trading analyst AI. Analyze the trading signal and market data to provide a comprehensive trading recommendation. Consider technical indicators, market conditions, and risk factors. Respond with a JSON object containing: recommendation (buy/sell/hold), confidence (0-1), reasoning, riskLevel (low/medium/high), positionSize (0-1), stopLoss (percentage), and takeProfit (percentage)."
            },
            {
              "content": "=Trading Signal Analysis:\n\nSignal Data:\n- Symbol: {{ $json.symbol }}\n- Original Action: {{ $json.action }}\n- Signal Confidence: {{ $json.confidence }}\n- Signal Source: {{ $json.source || 'Unknown' }}\n\nMarket Data:\n- Current Price: ${{ $json.marketData.currentPrice }}\n- Previous Close: ${{ $json.marketData.previousClose }}\n- Price Change: {{ $json.marketData.priceChangePercent.toFixed(2) }}%\n- 20-day SMA: ${{ $json.marketData.sma20.toFixed(2) }}\n- Volatility: {{ $json.marketData.volatility.toFixed(2) }}\n- Volume Ratio: {{ $json.marketData.volumeRatio.toFixed(2) }}x\n\nTechnical Indicators:\n- Trend: {{ $json.technicalIndicators.trend }}\n- Volume Signal: {{ $json.technicalIndicators.volumeSignal }}\n- Volatility Level: {{ $json.technicalIndicators.volatilityLevel }}\n\nPlease provide your analysis and recommendation."
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "id": "ai_analysis",
      "name": "AI Trading Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.1,
      "position": [
        380,
        480
      ],
      "credentials": {
        "openAiApi": {
          "id": "bL198KSVK2N3SXb8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and combine with signal data\nconst signal = $('Process Market Data').first().json;\nconst aiResponse = $json.choices[0].message.content;\n\ntry {\n  // Extract JSON from AI response\n  const jsonMatch = aiResponse.match(/\\{[^}]*\\}/s);\n  if (!jsonMatch) {\n    throw new Error('No JSON found in AI response');\n  }\n  \n  const aiAnalysis = JSON.parse(jsonMatch[0]);\n  \n  // Validate AI response structure\n  const requiredFields = ['recommendation', 'confidence', 'reasoning', 'riskLevel'];\n  const missingFields = requiredFields.filter(field => !aiAnalysis[field]);\n  \n  if (missingFields.length > 0) {\n    throw new Error(`AI response missing fields: ${missingFields.join(', ')}`);\n  }\n  \n  // Combine signal with AI analysis\n  const finalSignal = {\n    ...signal,\n    aiAnalysis: {\n      ...aiAnalysis,\n      processedAt: new Date().toISOString(),\n      model: 'gpt-3.5-turbo',\n      rawResponse: aiResponse\n    },\n    finalRecommendation: aiAnalysis.recommendation,\n    combinedConfidence: (signal.confidence + aiAnalysis.confidence) / 2,\n    status: 'analyzed'\n  };\n  \n  return [finalSignal];\n  \n} catch (error) {\n  // Fallback if AI response parsing fails\n  const fallbackSignal = {\n    ...signal,\n    aiAnalysis: {\n      recommendation: signal.action,\n      confidence: Math.max(0.3, signal.confidence - 0.2),\n      reasoning: 'AI analysis failed, using original signal with reduced confidence',\n      riskLevel: 'high',\n      error: error.message,\n      rawResponse: aiResponse\n    },\n    finalRecommendation: signal.action,\n    combinedConfidence: Math.max(0.3, signal.confidence - 0.2),\n    status: 'analyzed_with_error'\n  };\n  \n  return [fallbackSignal];\n}"
      },
      "id": "parse_ai_response",
      "name": "Parse AI Recommendation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Route signals and prepare for execution or notification\nconst signal = $json;\nconst CONFIDENCE_THRESHOLD = 0.6;\n\n// Apply confidence and risk filters\nlet decision = {\n  ...signal,\n  processedAt: new Date().toISOString()\n};\n\n// Check confidence threshold\nif (signal.combinedConfidence < CONFIDENCE_THRESHOLD) {\n  decision.status = 'rejected';\n  decision.rejectionReason = `Confidence ${signal.combinedConfidence.toFixed(2)} below threshold ${CONFIDENCE_THRESHOLD}`;\n  decision.finalRecommendation = 'hold';\n} else if (signal.aiAnalysis.riskLevel === 'high' && signal.combinedConfidence < 0.8) {\n  decision.status = 'rejected';\n  decision.rejectionReason = 'High risk with insufficient confidence';\n  decision.finalRecommendation = 'hold';\n} else {\n  decision.status = 'approved';\n  decision.readyForExecution = true;\n}\n\nreturn [decision];"
      },
      "id": "route_by_action",
      "name": "Route by Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        300
      ]
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are an expert trading analyst AI. Analyze the trading signal and market data to provide a comprehensive trading recommendation. Consider technical indicators, market conditions, and risk factors. Respond with a JSON object containing: recommendation (buy/sell/hold), confidence (0-1), reasoning, riskLevel (low/medium/high), positionSize (0-1), stopLoss (percentage), and takeProfit (percentage)."
            },
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=Trading Signal Analysis:|Signal Data:- Symbol: {{ $json.symbol }}- Original Action: {{ $json.action }}- Signal Confidence: {{ $json.confidence }}- Signal Source: {{ $json.source || 'Unknown' }}Market Data:- Current Price: ${{ $json.marketData.currentPrice }}- Previous Close: ${{ $json.marketData.previousClose }}- Price Change: {{ $json.marketData.priceChangePercent.toFixed(2) }}%- 20-day SMA: ${{ $json.marketData.sma20.toFixed(2) }}- Volatility: {{ $json.marketData.volatility.toFixed(2) }}- Volume Ratio: {{ $json.marketData.volumeRatio.toFixed(2) }}xTechnical Indicators:- Trend: {{ $json.technicalIndicators.trend }}- Volume Signal: {{ $json.technicalIndicators.volumeSignal }}- Volatility Level: {{ $json.technicalIndicators.volatilityLevel }}Please provide your analysis and recommendation."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        840,
        300
      ],
      "id": "3a624e3b-3443-46da-a53e-25cdd18636c2",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-20b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        940,
        440
      ],
      "id": "5be070b5-0a42-4612-a8be-40ff1cf5f7ca",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "DgQSQ6OnWRyMfHDV",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "path": "d3a2ba6f-4f18-466c-8222-01b56d8eccc3",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        20,
        300
      ],
      "id": "c5a0f1b5-e57b-4938-a264-b38bc48ed368",
      "name": "Webhook",
      "webhookId": "d3a2ba6f-4f18-466c-8222-01b56d8eccc3"
    }
  ],
  "connections": {
    "Validate Signal Data": {
      "main": [
        [
          {
            "node": "Fetch Market Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Market Data": {
      "main": [
        [
          {
            "node": "Process Market Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Market Data": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Trading Analysis": {
      "main": [
        []
      ]
    },
    "Parse AI Recommendation": {
      "main": [
        [
          {
            "node": "Route by Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Parse AI Recommendation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate Signal Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "281602ff-11e5-4458-8412-2b1086485031",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-06T15:16:56.842Z",
      "updatedAt": "2025-08-06T15:16:56.842Z",
      "role": "workflow:owner",
      "workflowId": "M1UPNLmZ4t5EZcgD",
      "projectId": "dfihSMO24GNVuIpM",
      "project": {
        "createdAt": "2025-06-02T01:49:12.943Z",
        "updatedAt": "2025-06-03T17:01:34.876Z",
        "id": "dfihSMO24GNVuIpM",
        "name": "guillaume bolivard <guillaumebolivard@gmail.com>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-02T01:49:12.944Z",
            "updatedAt": "2025-06-02T01:49:12.944Z",
            "role": "project:personalOwner",
            "userId": "7bcd283c-9587-46b0-b078-91f3217e06b7",
            "projectId": "dfihSMO24GNVuIpM",
            "user": {
              "createdAt": "2025-06-02T01:49:12.554Z",
              "updatedAt": "2025-07-28T18:29:17.351Z",
              "id": "7bcd283c-9587-46b0-b078-91f3217e06b7",
              "email": "guillaumebolivard@gmail.com",
              "firstName": "guillaume",
              "lastName": "bolivard",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-06-03T17:01:45.849Z",
                "personalization_survey_n8n_version": "1.94.1",
                "companySize": "<20",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "IMfYaRPSuI74c7Ep",
                "userActivatedAt": 1753375680028,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753727350221
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}