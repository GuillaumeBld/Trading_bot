{
  "createdAt": "2025-07-29T15:31:32.071Z",
  "updatedAt": "2025-07-29T19:02:57.000Z",
  "id": "0XA5GMv2RZKr2cnH",
  "name": "Engineer_SW",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "functionCode": "// Prepare engineer input\nconst input = items[0].json;\nreturn [{\n  json: {\n    blueprint: input.blueprint,\n    modelName: input.modelName,\n    memoryKey: input.memoryKey,\n    retryCount: 0,\n    maxRetries: 3\n  }\n}];"
      },
      "id": "engineer_input",
      "name": "Engineer Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        100,
        100
      ]
    },
    {
      "parameters": {
        "workflowId": "lLOiPevOcAHJILQ8",
        "options": {}
      },
      "id": "engineer_llm",
      "name": "Engineer LLM",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        300,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.success}}"
            }
          ]
        }
      },
      "id": "engineer_retry_check",
      "name": "Check Retry",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        500,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Retry logic with error context\nconst input = items[0].json;\nif (input.retryCount >= input.maxRetries) {\n  return [{\n    json: {\n      success: false,\n      error: \"Max retries exceeded\",\n      role: \"engineer\"\n    }\n  }];\n}\n\n// Add error context to prompt\nconst enhancedBlueprint = {\n  ...input.blueprint,\n  previousError: input.error,\n  retryCount: input.retryCount + 1\n};\n\nreturn [{\n  json: {\n    blueprint: enhancedBlueprint,\n    modelName: input.modelName,\n    memoryKey: input.memoryKey,\n    retryCount: input.retryCount + 1,\n    maxRetries: input.maxRetries\n  }\n}];"
      },
      "id": "engineer_retry",
      "name": "Retry Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        720,
        380
      ]
    },
    {
      "parameters": {
        "functionCode": "// Format engineer output\nconst result = items[0].json;\nif (!result.success) {\n  return [{\n    json: {\n      success: false,\n      error: result.error,\n      role: \"engineer\"\n    }\n  }];\n}\n\nconst response = JSON.parse(result.response || '{}');\nreturn [{\n  json: {\n    success: true,\n    implementation: response.implementation || {},\n    outputs: response.outputs || [],\n    issues: response.issues || [],\n    metrics: response.metrics || {},\n    response: result.response\n  }\n}];"
      },
      "id": "engineer_output",
      "name": "Engineer Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        700,
        100
      ]
    }
  ],
  "connections": {
    "Engineer Input": {
      "main": [
        [
          {
            "node": "Engineer LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Engineer LLM": {
      "main": [
        [
          {
            "node": "Check Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Retry": {
      "main": [
        [
          {
            "node": "Retry Logic",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Engineer Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retry Logic": {
      "main": [
        [
          {
            "node": "Engineer LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "2445c745-e19b-4509-b17e-7426e7151c42",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-07-29T15:31:32.073Z",
      "updatedAt": "2025-07-29T15:31:32.073Z",
      "role": "workflow:owner",
      "workflowId": "0XA5GMv2RZKr2cnH",
      "projectId": "dfihSMO24GNVuIpM",
      "project": {
        "createdAt": "2025-06-02T01:49:12.943Z",
        "updatedAt": "2025-06-03T17:01:34.876Z",
        "id": "dfihSMO24GNVuIpM",
        "name": "guillaume bolivard <guillaumebolivard@gmail.com>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-02T01:49:12.944Z",
            "updatedAt": "2025-06-02T01:49:12.944Z",
            "role": "project:personalOwner",
            "userId": "7bcd283c-9587-46b0-b078-91f3217e06b7",
            "projectId": "dfihSMO24GNVuIpM",
            "user": {
              "createdAt": "2025-06-02T01:49:12.554Z",
              "updatedAt": "2025-07-28T18:29:17.351Z",
              "id": "7bcd283c-9587-46b0-b078-91f3217e06b7",
              "email": "guillaumebolivard@gmail.com",
              "firstName": "guillaume",
              "lastName": "bolivard",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-06-03T17:01:45.849Z",
                "personalization_survey_n8n_version": "1.94.1",
                "companySize": "<20",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "IMfYaRPSuI74c7Ep",
                "userActivatedAt": 1753375680028,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753727350221
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}