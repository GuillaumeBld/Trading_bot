{
  "createdAt": "2025-07-23T03:31:57.213Z",
  "updatedAt": "2025-07-24T16:59:59.000Z",
  "id": "AGSHQSb0Pxz8etkP",
  "name": "Safe LLM Call with Retry",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Initialize retry configuration and budget tracking\nconst config = {\n  maxRetries: 3,\n  baseDelay: 2000,\n  backoffMultiplier: 2,\n  models: {\n    primary: \"gpt-4-turbo-preview\",\n    fallback: \"gpt-3.5-turbo\"\n  },\n  budget: {\n    dailyLimit: 100000,\n    currentUsage: 0\n  }\n};\n\nif (!$('StaticData').exists('budget_used')) {\n  $('StaticData').set('budget_used', 0);\n  $('StaticData').set('daily_budget', config.budget.dailyLimit);\n  $('StaticData').set('last_reset', new Date().toISOString().split('T')[0]);\n}\n\nconst today = new Date().toISOString().split('T')[0];\nconst lastReset = $('StaticData').get('last_reset');\nif (today !== lastReset) {\n  $('StaticData').set('budget_used', 0);\n  $('StaticData').set('last_reset', today);\n}\n\nreturn [{\n  json: {\n    ...$json,\n    retry_config: config,\n    attempt: 1,\n    model: config.models.primary,\n    budget_remaining: $('StaticData').get('daily_budget') - $('StaticData').get('budget_used'),\n    budget_used: $('StaticData').get('budget_used'),\n    prompt: $json.prompt || '',\n    systemMsg: $json.systemMsg || 'You are a helpful AI assistant.',\n    maxTokens: $json.maxTokens || 2000\n  }\n}];"
      },
      "id": "init-retry-config",
      "name": "Initialize Retry Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        45
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "budget-check",
              "operator": {
                "type": "number",
                "operation": "larger",
                "value": 0
              },
              "leftValue": "={{ $json.budget_remaining }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "budget-gate",
      "name": "Budget Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        120,
        45
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle LLM response and add status code\nconst response = $json;\nlet statusCode = 200;\nlet error = null;\n\nif (response.error) {\n  statusCode = response.error.statusCode || 500;\n  error = response.error;\n} else if (!response.content && !response.response) {\n  statusCode = 500;\n  error = { message: 'Empty response from LLM' };\n}\n\nreturn [{\n  json: {\n    ...response,\n    statusCode: statusCode,\n    error: error,\n    content: response.content || response.response || ''\n  }\n}];"
      },
      "id": "handle-response",
      "name": "Handle Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        716,
        -380
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "or",
          "conditions": [
            {
              "id": "rate-limit",
              "operator": {
                "type": "number",
                "operation": "equals",
                "value": "429"
              },
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": ""
            },
            {
              "id": "server-error",
              "operator": {
                "type": "number",
                "operation": "larger",
                "value": "499"
              },
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "retry-gate",
      "name": "Retry Gate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -240,
        -500
      ]
    },
    {
      "parameters": {
        "unit": "milliseconds"
      },
      "id": "retry-delay",
      "name": "Retry Delay",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -100,
        -380
      ],
      "webhookId": "2e9f30c3-4170-4f1f-a567-4ec577772e0a"
    },
    {
      "parameters": {
        "jsCode": "// Prepare for retry\nconst nextAttempt = $json.attempt + 1;\nconst nextModel = nextAttempt > 2 ? $json.retry_config.models.fallback : $json.model;\n\nif (nextAttempt > $json.retry_config.maxRetries) {\n  return [{\n    json: {\n      ...$json,\n      status: 'error',\n      error: { message: 'Max retries exceeded', finalError: $json.error }\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    ...$json,\n    attempt: nextAttempt,\n    model: nextModel,\n    retry_message: `Retry attempt ${nextAttempt} after ${$json.retry_config.baseDelay * Math.pow($json.retry_config.backoffMultiplier, $json.attempt - 1)}ms delay`\n  }\n}];"
      },
      "id": "prepare-retry",
      "name": "Prepare Retry",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        -380
      ]
    },
    {
      "parameters": {
        "jsCode": "// Calculate token usage and update budget\nconst promptTokens = $json.usage?.prompt_tokens || 0;\nconst completionTokens = $json.usage?.completion_tokens || 0;\nconst totalTokens = promptTokens + completionTokens;\n\nconst currentUsed = $('StaticData').get('budget_used');\nconst newUsed = currentUsed + totalTokens;\n$('StaticData').set('budget_used', newUsed);\n\nreturn [{\n  json: {\n    ...$json,\n    tokens_used: totalTokens,\n    prompt_tokens: promptTokens,\n    completion_tokens: completionTokens,\n    budget_remaining: $('StaticData').get('daily_budget') - newUsed,\n    budget_used: newUsed,\n    status: \"success\",\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "calculate-tokens",
      "name": "Calculate Tokens",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        936,
        -380
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "id": "log-llm-call",
      "name": "Log LLM Call",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1156,
        -380
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle final response or error\nconst finalResponse = {\n  content: $json.content || $json.response || $json.error?.message,\n  tokens_used: $json.tokens_used || 0,\n  status: $json.status || ($json.error ? 'error' : 'success'),\n  attempt: $json.attempt,\n  budget_remaining: $json.budget_remaining || 0,\n  budget_used: $json.budget_used || 0,\n  model_used: $json.model,\n  error: $json.error || null\n};\n\nreturn [{\n  json: finalResponse\n}];"
      },
      "id": "final-response",
      "name": "Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        0
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        340,
        -380
      ],
      "id": "175a4072-d561-4a01-9deb-ca335c7c4216",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "moonshotai/kimi-k2",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        340,
        -160
      ],
      "id": "7b0abadb-8f93-49da-b446-18c1042d44d8",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "DgQSQ6OnWRyMfHDV",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "prompt"
            },
            {
              "name": "systemMsg"
            },
            {
              "name": "maxTokens"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -460,
        -540
      ],
      "id": "56acfa67-fd9f-46d1-88fe-78c884d705e3",
      "name": "When Executed by Another Workflow"
    }
  ],
  "connections": {
    "Initialize Retry Config": {
      "main": [
        [
          {
            "node": "Budget Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Budget Check": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Handle Response": {
      "main": [
        [
          {
            "node": "Calculate Tokens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Tokens": {
      "main": [
        [
          {
            "node": "Log LLM Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log LLM Call": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retry Gate": {
      "main": [
        [
          {
            "node": "Retry Delay",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Retry Delay": {
      "main": [
        [
          {
            "node": "Prepare Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Retry": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Initialize Retry Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "03fea9ba-c3ad-462e-9305-4c4ee9e7d67f",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-07-23T03:31:57.217Z",
      "updatedAt": "2025-07-23T03:31:57.217Z",
      "role": "workflow:owner",
      "workflowId": "AGSHQSb0Pxz8etkP",
      "projectId": "dfihSMO24GNVuIpM",
      "project": {
        "createdAt": "2025-06-02T01:49:12.943Z",
        "updatedAt": "2025-06-03T17:01:34.876Z",
        "id": "dfihSMO24GNVuIpM",
        "name": "guillaume bolivard <guillaumebolivard@gmail.com>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-02T01:49:12.944Z",
            "updatedAt": "2025-06-02T01:49:12.944Z",
            "role": "project:personalOwner",
            "userId": "7bcd283c-9587-46b0-b078-91f3217e06b7",
            "projectId": "dfihSMO24GNVuIpM",
            "user": {
              "createdAt": "2025-06-02T01:49:12.554Z",
              "updatedAt": "2025-07-28T18:29:17.351Z",
              "id": "7bcd283c-9587-46b0-b078-91f3217e06b7",
              "email": "guillaumebolivard@gmail.com",
              "firstName": "guillaume",
              "lastName": "bolivard",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-06-03T17:01:45.849Z",
                "personalization_survey_n8n_version": "1.94.1",
                "companySize": "<20",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "IMfYaRPSuI74c7Ep",
                "userActivatedAt": 1753375680028,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753727350221
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}