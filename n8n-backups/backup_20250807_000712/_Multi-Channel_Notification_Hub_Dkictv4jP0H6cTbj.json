{
  "createdAt": "2025-08-06T15:18:44.207Z",
  "updatedAt": "2025-08-06T15:22:58.000Z",
  "id": "Dkictv4jP0H6cTbj",
  "name": "ðŸ”” Multi-Channel Notification Hub",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "id": "notification_webhook",
      "name": "Notification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        20,
        300
      ],
      "parameters": {
        "httpMethod": "POST",
        "path": "notification",
        "responseMode": "onReceived",
        "responseData": "firstEntryJson"
      }
    },
    {
      "id": "parse_notification",
      "name": "Parse Notification Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        300
      ],
      "parameters": {
        "language": "javaScript",
        "jsCode": "// Parse and validate notification data\nconst notification = $json;\n\n// Validation\nif (!notification.type) {\n  throw new Error('Notification type is required');\n}\n\nif (!notification.message) {\n  throw new Error('Notification message is required');\n}\n\n// Default values\nconst parsedNotification = {\n  id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  type: notification.type,\n  message: notification.message,\n  title: notification.title || `Trading Bot Alert - ${notification.type}`,\n  severity: notification.severity || 'medium',\n  symbol: notification.symbol || '',\n  value: notification.value || '',\n  timestamp: new Date().toISOString(),\n  channels: notification.channels || ['slack'],\n  data: notification.data || {},\n  source: notification.source || 'trading-bot'\n};\n\n// Determine channels based on severity if not specified\nif (!notification.channels) {\n  switch (parsedNotification.severity) {\n    case 'critical':\n      parsedNotification.channels = ['slack', 'discord', 'email'];\n      break;\n    case 'high':\n      parsedNotification.channels = ['slack', 'discord'];\n      break;\n    case 'medium':\n      parsedNotification.channels = ['slack'];\n      break;\n    default:\n      parsedNotification.channels = ['slack'];\n  }\n}\n\n// Create channel-specific messages\nconst channelMessages = {\n  slack: {\n    channel: '#trading-alerts',\n    username: 'Trading Bot',\n    icon_emoji: parsedNotification.severity === 'critical' ? ':red_circle:' : parsedNotification.severity === 'high' ? ':warning:' : ':information_source:',\n    text: `*${parsedNotification.title}*\\n${parsedNotification.message}`,\n    attachments: [\n      {\n        color: parsedNotification.severity === 'critical' ? 'danger' : parsedNotification.severity === 'high' ? 'warning' : 'good',\n        fields: [\n          { title: 'Type', value: parsedNotification.type, short: true },\n          { title: 'Severity', value: parsedNotification.severity, short: true },\n          { title: 'Time', value: new Date().toLocaleString(), short: true },\n          ...(parsedNotification.symbol ? [{ title: 'Symbol', value: parsedNotification.symbol, short: true }] : []),\n          ...(parsedNotification.value ? [{ title: 'Value', value: parsedNotification.value, short: true }] : [])\n        ]\n      }\n    ]\n  },\n  discord: {\n    content: `**${parsedNotification.title}**\\n${parsedNotification.message}`,\n    embeds: [\n      {\n        title: parsedNotification.title,\n        description: parsedNotification.message,\n        color: parsedNotification.severity === 'critical' ? 15158332 : parsedNotification.severity === 'high' ? 16776960 : 3066993,\n        fields: [\n          { name: 'Type', value: parsedNotification.type, inline: true },\n          { name: 'Severity', value: parsedNotification.severity, inline: true },\n          { name: 'Time', value: new Date().toLocaleString(), inline: true },\n          ...(parsedNotification.symbol ? [{ name: 'Symbol', value: parsedNotification.symbol, inline: true }] : []),\n          ...(parsedNotification.value ? [{ name: 'Value', value: parsedNotification.value, inline: true }] : [])\n        ],\n        timestamp: new Date().toISOString()\n      }\n    ]\n  },\n  email: {\n    subject: `[${parsedNotification.severity.toUpperCase()}] ${parsedNotification.title}`,\n    html: `\n      <h2>${parsedNotification.title}</h2>\n      <p><strong>Message:</strong> ${parsedNotification.message}</p>\n      <hr>\n      <table>\n        <tr><td><strong>Type:</strong></td><td>${parsedNotification.type}</td></tr>\n        <tr><td><strong>Severity:</strong></td><td>${parsedNotification.severity}</td></tr>\n        <tr><td><strong>Time:</strong></td><td>${new Date().toLocaleString()}</td></tr>\n        ${parsedNotification.symbol ? `<tr><td><strong>Symbol:</strong></td><td>${parsedNotification.symbol}</td></tr>` : ''}\n        ${parsedNotification.value ? `<tr><td><strong>Value:</strong></td><td>${parsedNotification.value}</td></tr>` : ''}\n      </table>\n      <hr>\n      <p><em>Sent by AI Trading Bot at ${new Date().toLocaleString()}</em></p>\n    `,\n    text: `${parsedNotification.title}\\n\\n${parsedNotification.message}\\n\\nType: ${parsedNotification.type}\\nSeverity: ${parsedNotification.severity}\\nTime: ${new Date().toLocaleString()}${parsedNotification.symbol ? `\\nSymbol: ${parsedNotification.symbol}` : ''}${parsedNotification.value ? `\\nValue: ${parsedNotification.value}` : ''}`\n  }\n};\n\nreturn [{\n  ...parsedNotification,\n  channelMessages\n}];"
      }
    },
    {
      "id": "check_slack",
      "name": "Check Slack Channel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        200
      ],
      "parameters": {
        "language": "javaScript",
        "jsCode": "const notification = $json;\nif (notification.channels.includes('slack')) {\n  return [notification];\n}\nreturn [];"
      }
    },
    {
      "id": "send_slack",
      "name": "Send to Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        680,
        200
      ],
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "{{ $json.channelMessages.slack.channel }}",
        "text": "{{ $json.channelMessages.slack.text }}",
        "username": "{{ $json.channelMessages.slack.username }}",
        "attachments": "{{ $json.channelMessages.slack.attachments }}"
      }
    },
    {
      "id": "check_discord",
      "name": "Check Discord Channel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ],
      "parameters": {
        "language": "javaScript",
        "jsCode": "const notification = $json;\nif (notification.channels.includes('discord')) {\n  return [notification];\n}\nreturn [];"
      }
    },
    {
      "id": "send_discord",
      "name": "Send to Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        680,
        300
      ],
      "parameters": {
        "authentication": "webhook",
        "channelId": "",
        "content": "{{ $json.channelMessages.discord.content }}",
        "embeds": "{{ JSON.stringify($json.channelMessages.discord.embeds) }}"
      }
    },
    {
      "id": "check_email",
      "name": "Check Email Channel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        400
      ],
      "parameters": {
        "language": "javaScript",
        "jsCode": "const notification = $json;\nif (notification.channels.includes('email')) {\n  return [notification];\n}\nreturn [];"
      }
    },
    {
      "id": "send_email",
      "name": "Send Email Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        680,
        400
      ],
      "parameters": {
        "operation": "send",
        "fromEmail": "trading-bot@your-domain.com",
        "toEmail": "alerts@your-domain.com",
        "subject": "{{ $json.channelMessages.email.subject }}",
        "message": "{{ $json.channelMessages.email.html }}",
        "options": {
          "contentType": "html"
        }
      }
    },
    {
      "id": "log_notification",
      "name": "Log Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ],
      "parameters": {
        "language": "javaScript",
        "jsCode": "// Log the notification for tracking and analytics\nconst notification = $json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  notificationId: notification.id,\n  type: notification.type,\n  severity: notification.severity,\n  channels: notification.channels,\n  source: notification.source,\n  processed: true,\n  deliveryStatus: {\n    attempted: notification.channels.length,\n    successful: notification.channels.length, // In real implementation, track actual delivery\n    failed: 0\n  }\n};\n\n// Here you would typically send to a logging system or database\n// For now, we'll just return the log entry\nreturn [{\n  notification,\n  log: logEntry,\n  summary: `Notification ${notification.id} sent to ${notification.channels.join(', ')} channels`\n}];"
      }
    }
  ],
  "connections": {
    "Notification Webhook": {
      "main": [
        [
          {
            "node": "Parse Notification Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Notification Data": {
      "main": [
        [
          {
            "node": "Check Slack Channel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Discord Channel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Email Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Slack Channel": {
      "main": [
        [
          {
            "node": "Send to Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Slack": {
      "main": [
        [
          {
            "node": "Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Discord Channel": {
      "main": [
        [
          {
            "node": "Send to Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Discord": {
      "main": [
        [
          {
            "node": "Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Channel": {
      "main": [
        [
          {
            "node": "Send Email Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Alert": {
      "main": [
        [
          {
            "node": "Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": null,
  "versionId": "02f6ab72-deac-4813-8d55-bb0f4bbc244a",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-06T15:18:44.209Z",
      "updatedAt": "2025-08-06T15:18:44.209Z",
      "role": "workflow:owner",
      "workflowId": "Dkictv4jP0H6cTbj",
      "projectId": "dfihSMO24GNVuIpM",
      "project": {
        "createdAt": "2025-06-02T01:49:12.943Z",
        "updatedAt": "2025-06-03T17:01:34.876Z",
        "id": "dfihSMO24GNVuIpM",
        "name": "guillaume bolivard <guillaumebolivard@gmail.com>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-02T01:49:12.944Z",
            "updatedAt": "2025-06-02T01:49:12.944Z",
            "role": "project:personalOwner",
            "userId": "7bcd283c-9587-46b0-b078-91f3217e06b7",
            "projectId": "dfihSMO24GNVuIpM",
            "user": {
              "createdAt": "2025-06-02T01:49:12.554Z",
              "updatedAt": "2025-07-28T18:29:17.351Z",
              "id": "7bcd283c-9587-46b0-b078-91f3217e06b7",
              "email": "guillaumebolivard@gmail.com",
              "firstName": "guillaume",
              "lastName": "bolivard",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-06-03T17:01:45.849Z",
                "personalization_survey_n8n_version": "1.94.1",
                "companySize": "<20",
                "companyType": "saas",
                "role": "business-owner",
                "reportedSource": "google"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "IMfYaRPSuI74c7Ep",
                "userActivatedAt": 1753375680028,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753727350221
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}